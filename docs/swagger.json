{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Create token with given credentials",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Delete session with given access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/comment/create": {
            "post": {
                "description": "Create comment from payload with POST method; need Authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "Create comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comment.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/comment/delete/{comment_id}": {
            "delete": {
                "description": "Delete comment by comment id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "Delete Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the comment to delete",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/comment/get/{comment_id}": {
            "get": {
                "description": "Get comment by id. This id must be taken from path and need authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "Get Comment BY ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the comment to get comment",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/entity.Comment"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/comment/list/{post_id}": {
            "get": {
                "description": "List comments with giving post_id which is requested from params. Authenticates given user by giving an access jwttoken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "List comments by post id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the post to list comments",
                        "name": "post_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Comment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/comment/update": {
            "put": {
                "description": "Update comment from payload with PUT method; need Authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "summary": "Update Comment By ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comment.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/comment/update/{comment_id}/image": {
            "put": {
                "description": "Update comment image with authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comment"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the comment to update the image for",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "The image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.UpdateImageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friendship/accept/{request_id}": {
            "post": {
                "description": "Accept user from pending friendship request, this endpoint needs authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "Accept user from pending friendship request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the user to add as friendship",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friendship/add/{user_id}": {
            "post": {
                "description": "Add user as a friend, this endpoint needs authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "Add user as friend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the user to add as friendship",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friendship/list/{status}": {
            "get": {
                "description": "List friendship by status, if status empty it will return all data. Status is enum v\nStatus is enum values and get; pending and accepted values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "List friendship",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter with status it takes enum values which are; pending, accepted and also empty string. if status is empty string all documents will return",
                        "name": "status",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/friendship.ReadFriendship"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friendship/reject/{request_id}": {
            "post": {
                "description": "Reject user from pending friendship request, this endpoint needs authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "Reject user from pending friendship request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the user to add as friendship",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/friendship/remove/{request_id}": {
            "post": {
                "description": "Remove user from friend, this endpoint needs authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friendship"
                ],
                "summary": "Remove user from friend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the request to be removed which is in list in friendship endpoint",
                        "name": "request_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Get the status of server.",
                "consumes": [
                    "*/*"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Show the status of server.",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/like/comments/{comment_id}": {
            "post": {
                "description": "Like comment by comment id. This id must be taken from path and need authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Like"
                ],
                "summary": "Like Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the comment to be liked",
                        "name": "comment_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/like/posts/{post_id}": {
            "post": {
                "description": "Like post by post id. This id must be taken from path and need authorization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Like"
                ],
                "summary": "Like Post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the post to be liked",
                        "name": "post_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/post/create": {
            "post": {
                "description": "Create post from body with authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Create post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/post.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/post/delete/{post_id}": {
            "delete": {
                "description": "authenticates given user by giving an access jwttoken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Delete post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the post to delete",
                        "name": "post_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/post/get/{post_id}": {
            "get": {
                "description": "authenticates given user by giving an access jwttoken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Get post by id post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/post.ReadPostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/post/list": {
            "get": {
                "description": "authenticates given user by giving an access jwttoken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "List post",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/post.ReadPostResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/post/update": {
            "put": {
                "description": "Update post from body with authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/post.UpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/httpresponse.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/post/update/{post_id}/image": {
            "put": {
                "description": "Update post image with authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the post to update the image for",
                        "name": "post_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "The image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.UpdateImageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/private/update/photo": {
            "put": {
                "description": "Update profile pic with authentication",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update own profile pic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth token of logged-in user.",
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "The image file to upload",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/httpmodel.UpdateImageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/public/register": {
            "post": {
                "description": "authenticates given user by giving an access jwttoken.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Authenticate user",
                "parameters": [
                    {
                        "description": "body params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "username": {
                    "description": "Username of the user",
                    "type": "string",
                    "x-order": "1",
                    "example": "john"
                },
                "password": {
                    "description": "Password of the user",
                    "type": "string",
                    "x-order": "2",
                    "example": "TopSecret!!!"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "x-order": "1",
                    "example": "john"
                },
                "email": {
                    "type": "string",
                    "x-order": "2",
                    "example": "john@gmail.com"
                },
                "token_hash": {
                    "type": "string",
                    "x-order": "2",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7IklEIjozLCJVc2VybmFtZSI6Impob24iLCJFbWFpbCI6ImpvaG5AZ21haWwuY29tIiwiUGFzc3dvcmQiOiIkMmEkMTAkRkFUb1ZsS2Y2VmZIRGtYL1dLWmVRT0o2U1kuU3Z0SnNYYmhZV2FlTnBrbjU3S0hlNk4vZTIiLCJEZWZhdWx0Q3VycmVuY3lDb2RlIjoiIiwiY3JlYXRlZF9hdCI6IjIwMjItMTEtMjNUMjI6MjA6MDkuMzk0NzQ3KzAzOjAwIiwidXBkYXRlZF9hdCI6IjIwMjItMTEtMjNUMjI6MjA6MDkuMzk0NzQ3KzAzOjAwIiwiZGVsZXRlZF9hdCI6bnVsbH0sImV4cCI6MTY2OTM4OTM3MH0.b_i6GhYzqOp0VvouVi0rw2VG43UZx7lnJXqNEAKMH8o"
                }
            }
        },
        "comment.CreateRequest": {
            "type": "object",
            "required": [
                "body",
                "post_id"
            ],
            "properties": {
                "post_id": {
                    "description": "ID of the post",
                    "type": "integer",
                    "x-order": "1",
                    "example": 1
                },
                "body": {
                    "description": "Body of the post",
                    "type": "string",
                    "x-order": "2",
                    "example": "New Post..."
                },
                "parent_id": {
                    "description": "ID of the parent comment id",
                    "type": "integer",
                    "x-order": "3",
                    "example": 1
                }
            }
        },
        "comment.UpdateRequest": {
            "type": "object",
            "required": [
                "body",
                "id",
                "post_id"
            ],
            "properties": {
                "id": {
                    "description": "ID of the comment",
                    "type": "integer",
                    "x-order": "1",
                    "example": 1
                },
                "post_id": {
                    "description": "ID of the post",
                    "type": "integer",
                    "x-order": "2",
                    "example": 3
                },
                "body": {
                    "description": "Body of the post",
                    "type": "string",
                    "x-order": "3",
                    "example": "3"
                }
            }
        },
        "entity.Comment": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "parenId": {
                    "type": "integer"
                },
                "post": {
                    "$ref": "#/definitions/entity.Post"
                },
                "postID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/entity.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "entity.Post": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/entity.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "profilePhoto": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "friendship.ReadFriendship": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "description": "ID of the friendship request",
                    "type": "integer"
                },
                "receiver": {
                    "$ref": "#/definitions/httpmodel.CommonUser"
                },
                "sender": {
                    "$ref": "#/definitions/httpmodel.CommonUser"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "httpmodel.CommonUser": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "profile_photo": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "httpmodel.CreateResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID of the created model`",
                    "type": "integer",
                    "x-order": "1",
                    "example": 1
                }
            }
        },
        "httpmodel.UpdateImageResponse": {
            "type": "object",
            "properties": {
                "uploaded_file_name": {
                    "description": "Uploaded file name",
                    "type": "string",
                    "x-order": "1",
                    "example": "https://res-cdn.com/postId"
                }
            }
        },
        "httpresponse.Response": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean",
                    "x-order": "1",
                    "example": true
                },
                "status_code": {
                    "type": "integer",
                    "x-order": "2",
                    "example": 200
                },
                "error": {
                    "x-order": "4",
                    "$ref": "#/definitions/httpresponse.ResponseError"
                },
                "data": {
                    "x-order": "5"
                }
            }
        },
        "httpresponse.ResponseError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "x-order": "1",
                    "example": "NOT_FOUND"
                },
                "detail": {
                    "type": "string",
                    "x-order": "2",
                    "example": "user not found"
                }
            }
        },
        "post.CreateRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                }
            }
        },
        "post.ReadPostResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/post.ReadPostResponseComment"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "liked_count": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/httpmodel.CommonUser"
                }
            }
        },
        "post.ReadPostResponseComment": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "liked_count": {
                    "type": "integer"
                },
                "sub_comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/post.ReadPostResponseComment"
                    }
                },
                "user": {
                    "$ref": "#/definitions/httpmodel.CommonUser"
                }
            }
        },
        "post.UpdateRequest": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                }
            }
        },
        "user.RegisterRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.RegisterResponse": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "x-order": "1",
                    "example": "john"
                },
                "email": {
                    "type": "string",
                    "x-order": "2",
                    "example": "john@gmail.com"
                }
            }
        }
    }
}